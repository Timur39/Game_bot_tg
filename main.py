import random
import time

import telebot
from telebot import types

from secret_data import token

bot = telebot.TeleBot(token)

coins = 30


def goose_number(user_number: int, computer_number: int):
    if user_number > computer_number:
        return f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ'
    elif user_number < computer_number:
        return f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ'
    else:
        return '–ø–æ–±–µ–¥–∞'


def tic_tac_toe_check_win(gameboard: list[str], krestik_or_nolik: str):
    if gameboard[0] == krestik_or_nolik and gameboard[1] == krestik_or_nolik and gameboard[2] == krestik_or_nolik:
        return True
    elif gameboard[0] == krestik_or_nolik and gameboard[3] == krestik_or_nolik and gameboard[6] == krestik_or_nolik:
        return True
    elif gameboard[3] == krestik_or_nolik and gameboard[4] == krestik_or_nolik and gameboard[5] == krestik_or_nolik:
        return True
    elif gameboard[6] == krestik_or_nolik and gameboard[7] == krestik_or_nolik and gameboard[8] == krestik_or_nolik:
        return True
    elif gameboard[1] == krestik_or_nolik and gameboard[4] == krestik_or_nolik and gameboard[7] == krestik_or_nolik:
        return True
    elif gameboard[2] == krestik_or_nolik and gameboard[5] == krestik_or_nolik and gameboard[8] == krestik_or_nolik:
        return True
    elif gameboard[0] == krestik_or_nolik and gameboard[4] == krestik_or_nolik and gameboard[8] == krestik_or_nolik:
        return True
    elif gameboard[2] == krestik_or_nolik and gameboard[4] == krestik_or_nolik and gameboard[6] == krestik_or_nolik:
        return True
    else:
        return False


def rock_paper_scissors_check(user_answer, computer_answer):
    if user_answer == computer_answer:
        return '–ù–∏—á—å—è'
    elif user_answer == '–∫–∞–º–µ–Ω—å' and computer_answer == '–Ω–æ–∂–Ω–∏—Ü—ã':
        return '–¢—ã –ø–æ–±–µ–¥–∏–ª'
    elif user_answer == '–Ω–æ–∂–Ω–∏—Ü—ã' and computer_answer == '–±—É–º–∞–≥–∞':
        return '–¢—ã –ø–æ–±–µ–¥–∏–ª'
    elif user_answer == '–±—É–º–∞–≥–∞' and computer_answer == '–∫–∞–º–µ–Ω—å':
        return '–¢—ã –ø–æ–±–µ–¥–∏–ª'
    else:
        return '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª'


@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    item1 = types.KeyboardButton('–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)')
    item2 = types.KeyboardButton('–ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞(15 –º–æ–Ω–µ—Ç)')
    item3 = types.KeyboardButton('–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏(25 –º–æ–Ω–µ—Ç)')
    item4 = types.KeyboardButton('–í–∏–∫—Ç–æ—Ä–∏–Ω–∞(50 –º–æ–Ω–µ—Ç)')
    item5 = types.KeyboardButton('–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞(100 –º–æ–Ω–µ—Ç)')
    markup.add(item1, item2, item3, item4, item5)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∏–≥—Ä—ã.\n–ù–æ –Ω–µ –≤—Å–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –∏—Ö –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞ –º–æ–Ω–µ—Ç—ã. –ú–æ–Ω–µ—Ç—ã –¥–∞–µ—Ç—Å—è –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä.',
                     reply_markup=markup)
    bot.register_next_step_handler(message, second_step_start_handler)


def second_step_start_handler(message):
    markup = types.ReplyKeyboardRemove()
    if message.text == '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ(–±–µ—Å–ø–ª–∞—Ç–Ω–æ)':
        bot.send_message(message.chat.id,
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {message.text}\n–í—ã –¥–æ–ª–∂–Ω—ã —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞—é\n–Ø –±—É–¥—É –¥–∞–≤–∞—Ç—å –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏\n–£ –≤–∞—Å 7 –ø–æ–ø—ã—Ç–æ–∫',
                         reply_markup=markup)
        computer_number = random.randint(1, 100)
        counter = 1
        bot.register_next_step_handler(message, game_goose_number, computer_number, counter)
    elif message.text == '–ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏(25 –º–æ–Ω–µ—Ç)' and coins >= 25:
        bot.send_message(message.chat.id,
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {message.text}\n–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–±–µ–¥–∏—Ç—å –º–µ–Ω—è, —Ä–∞—Å–ø–æ–ª–æ–∂–∏–≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –∏–ª–∏ –Ω–æ–ª–∏–∫–∏ –≤ —Ä—è–¥\n–ò–≥—Ä–∞–µ–º –¥–æ –ø–µ—Ä–≤–æ–π –ø–æ–±–µ–¥—ã',
                         reply_markup=markup)
        computer_step = random.randint(0, 9)
        reversed_lst = ['‚ùå', '‚≠ïÔ∏è']
        reversed_lst.reverse()
        krestik_or_nolik = random.choice([['‚ùå', '‚≠ïÔ∏è'], reversed_lst])
        game_tic_tac_toe(message, computer_step, krestik_or_nolik)
    elif message.text == '–ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞(15 –º–æ–Ω–µ—Ç)' and coins >= 15:
        bot.send_message(message.chat.id,
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {message.text}\n–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–±–µ–¥–∏—Ç—å –º–µ–Ω—è\n–ò–≥—Ä–∞–µ–º –¥–æ —Ç—Ä–µ—Ö –ø–æ–±–µ–¥\n–í–≤–µ–¥–∏—Ç–µ ü™®(–∫–∞–º–µ–Ω—å) –∏–ª–∏ ‚úÇÔ∏è(–Ω–æ–∂–Ω–∏—Ü—ã) –∏–ª–∏ üìÑ(–±—É–º–∞–≥–∞)',
                         reply_markup=markup)
        win_counter = 0
        lose_counter = 0
        bot.register_next_step_handler(message, rock_paper_scissors, win_counter, lose_counter)
    elif message.text == '–í–∏–∫—Ç–æ—Ä–∏–Ω–∞(50 –º–æ–Ω–µ—Ç)' and coins >= 50:
        bot.send_message(message.chat.id,
                         f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {message.text}\n–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n–í—Å–µ–≥–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤',
                         reply_markup=markup)
        win_counter = 0
        counter = 0
        questions = {}
        with open('questions.txt', mode='r', encoding='utf-8') as file:
            file = file.readlines()
            for line in file:
                question, answer = line.split(';')
                questions[question] = answer.replace('\n', '').split(':')
        game_quiz(message, win_counter, counter, questions)
    elif message.text == '–§–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞(100 –º–æ–Ω–µ—Ç)' and coins >= 100:
        pass
    else:
        bot.send_message(message.chat.id, f'–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –∏–ª–∏ —Ç–∞–∫–æ–π –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.')
        bot.register_next_step_handler(message, second_step_start_handler)


def game_goose_number(message, computer_number: int, counter: int):
    global coins
    if not message.text.isdigit():
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, game_goose_number, computer_number, counter)
    elif int(message.text) > 100:
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 100')
        bot.register_next_step_handler(message, game_goose_number, computer_number, counter)
    elif int(message.text) < 1:
        bot.send_message(message.chat.id, f'–í—ã –≤–≤–µ–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1')
        bot.register_next_step_handler(message, game_goose_number, computer_number, counter)
    else:
        answer = goose_number(int(message.text), computer_number)
        if answer == '–ø–æ–±–µ–¥–∞':
            coins += 5
            bot.send_message(message.chat.id, f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ: {computer_number}\n+5 –º–æ–Ω–µ—Ç')
            bot.send_message(message.chat.id,
                             f'–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
            return
        bot.send_message(message.chat.id, f'{answer}')
        if counter < 7:
            counter += 1
            if int(message.text) == computer_number:
                bot.send_message(message.chat.id,
                                 f'–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
                return
            else:
                bot.register_next_step_handler(message, game_goose_number, computer_number, counter)
        else:
            bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ: {computer_number}')
            bot.send_message(message.chat.id,
                             f'–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')


def game_tic_tac_toe(message, computer_step: int, krestik_or_nolik: list[str],
                     first_step: str = random.choice(['computer', 'user']), gameboard=None):
    global coins
    if gameboard is None:
        gameboard = ['‚¨ú', '‚¨ú', '‚¨ú',
                     '‚¨ú', '‚¨ú', '‚¨ú',
                     '‚¨ú', '‚¨ú', '‚¨ú']
    user = krestik_or_nolik[0]
    computer = krestik_or_nolik[1]
    if tic_tac_toe_check_win(gameboard, krestik_or_nolik[0]):
        coins += 20
        bot.send_message(message.chat.id, f'–í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n+20 –º–æ–Ω–µ—Ç')
        bot.send_message(message.chat.id,
                         f'–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        return
    elif tic_tac_toe_check_win(gameboard, krestik_or_nolik[1]):
        bot.send_message(message.chat.id, f'–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!')
        bot.send_message(message.chat.id,
                         f'–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        return
    elif not '‚¨ú' in gameboard:
        bot.send_message(message.chat.id, '–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –≤ –Ω–∏—á—å—é!')
        bot.send_message(message.chat.id,
                         '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        return
    if first_step == 'computer':
        time.sleep(1)
        for i in range(len(gameboard)):
            if gameboard[computer_step - 1] == '‚¨ú':
                gameboard[computer_step - 1] = computer
                gameboard2 = gameboard[::]
                gameboard2.insert(3, '\n')
                gameboard2.insert(7, '\n')
                gameboard2.insert(11, '\n')
                bot.send_message(message.chat.id, '–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞')
                bot.send_message(message.chat.id, ''.join(gameboard2))
                first_step = 'user'
                game_tic_tac_toe(message, computer_step, krestik_or_nolik, first_step, gameboard)
                break
            else:
                computer_step = i
    else:
        bot.send_message(message.chat.id, f'–í–∞—à —Ö–æ–¥\n–í—ã {user}\n–î–ª—è —Ö–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9')
        bot.register_next_step_handler(message, game_tic_tac_toe_user_step, computer_step, krestik_or_nolik, first_step,
                                       gameboard)


def game_tic_tac_toe_user_step(message, computer_step, krestik_or_nolik, first_step, gameboard):
    if message.text.isdigit():
        if int(message.text) in range(1, 10):
            if gameboard[int(message.text) - 1] == '‚¨ú':
                gameboard[int(message.text) - 1] = krestik_or_nolik[0]
                gameboard2 = gameboard[::]
                gameboard2.insert(3, '\n')
                gameboard2.insert(7, '\n')
                gameboard2.insert(11, '\n')
                bot.send_message(message.chat.id, f'{''.join(gameboard2)}')
                first_step = 'computer'
                game_tic_tac_toe(message, computer_step, krestik_or_nolik, first_step, gameboard)
            else:
                bot.send_message(message.chat.id,
                                 f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
                bot.register_next_step_handler(message, game_tic_tac_toe, computer_step, krestik_or_nolik, first_step,
                                               gameboard)


def rock_paper_scissors(message, win_counter: int, lose_counter: int,
                        computer_step: list[str] = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])):
    global coins
    user_answer = message.text.lower()
    words_to_emoji = {'–∫–∞–º–µ–Ω—å': 'ü™®',
                      '–Ω–æ–∂–Ω–∏—Ü—ã': '‚úÇÔ∏è',
                      '–±—É–º–∞–≥–∞': 'üìÑ'}
    emoji_to_words = {'ü™®': '–∫–∞–º–µ–Ω—å',
                      '‚úÇÔ∏è': '–Ω–æ–∂–Ω–∏—Ü—ã',
                      'üìÑ': '–±—É–º–∞–≥–∞'}
    if win_counter == 3:
        coins += 10
        bot.send_message(message.chat.id, f'–¢—ã –ø–æ–±–µ–¥–∏–ª! –°–æ —Å—á–µ—Ç–æ–º: {win_counter}:{lose_counter}\n+10 –º–æ–Ω–µ—Ç')
        bot.send_message(message.chat.id,
                         '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        return
    elif lose_counter == 3:
        bot.send_message(message.chat.id, f'–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –°–æ —Å—á–µ—Ç–æ–º: {lose_counter}:{win_counter}')
        bot.send_message(message.chat.id,
                         '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        return

    if user_answer not in ['ü™®', '‚úÇÔ∏è', 'üìÑ'] and user_answer not in ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']:
        bot.send_message(message.chat.id,
                         '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞. –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —ç–º–æ–¥–∑–∏: ü™®, ‚úÇÔ∏è, üìÑ')
        bot.register_next_step_handler(message, rock_paper_scissors, win_counter, lose_counter)
    else:
        if user_answer in ['ü™®', '‚úÇÔ∏è', 'üìÑ']:
            user_answer = emoji_to_words[user_answer]
        result = rock_paper_scissors_check(user_answer, computer_step)
        if user_answer not in ['ü™®', '‚úÇÔ∏è', 'üìÑ']:
            user_answer = words_to_emoji[user_answer]
        if result == '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª':
            lose_counter += 1
        elif result == '–¢—ã –ø–æ–±–µ–¥–∏–ª':
            win_counter += 1
        bot.send_message(message.chat.id, f'{result}! –í—ã: {user_answer}, –∫–æ–º–ø—å—é—Ç–µ—Ä: {words_to_emoji[computer_step]}')
        computer_step = random.choice(['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞'])
        bot.register_next_step_handler(message, rock_paper_scissors, win_counter, lose_counter, computer_step)


def game_quiz(message, win_counter: int, counter: int, questions: dict):
    if counter >= 5:
        bot.send_message(message.chat.id, f'–ö–æ–ª-–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {win_counter}\n+{win_counter * 3} –º–æ–Ω–µ—Ç')
        bot.send_message(message.chat.id,
                         '–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?\n–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —ç—Ç—É –∏–≥—Ä—É —Å–Ω–æ–≤–∞')
        counter = 0
    else:
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton(questions[list(questions.keys())[counter]][0], callback_data='1')
        item2 = types.InlineKeyboardButton(questions[list(questions.keys())[counter]][1], callback_data='2')
        item3 = types.InlineKeyboardButton(questions[list(questions.keys())[counter]][2], callback_data='3')
        items = [item1, item2, item3]
        random.shuffle(items)
        markup.add(items[0], items[1], items[2])
        bot.send_message(message.chat.id, list(questions.keys())[counter], reply_markup=markup)

    @bot.callback_query_handler()
    def callback(call):
        nonlocal win_counter, counter
        if counter >= 5:
            counter = 0
            win_counter = 0
            coins += 3
            callback(call)
        elif call.data == '1':
            win_counter += 1
            counter += 1
            game_quiz(message, win_counter, counter, questions)
        elif call.data == '2':
            counter += 1
            game_quiz(message, win_counter, counter, questions)
        elif call.data == '3':
            counter += 1
            game_quiz(message, win_counter, counter, questions)


@bot.message_handler(commands=['coins'])
def coins_handler(message):
    bot.send_message(message.chat.id, f'–£ –≤–∞—Å {coins} –º–æ–Ω–µ—Ç')


@bot.message_handler()
def text_handler(message):
    bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ /coins')


bot.polling(none_stop=True)
